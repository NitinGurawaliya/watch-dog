// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String?
  image       String?   // profile pic from OAuth
  emailVerified  DateTime?  // ✅ ADD THIS LINE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  projects    Project[]

  Session Session[]

  Account Account[]
}

model Project {
  id          String    @id @default(uuid())
  name        String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  events      Event[]

}

model Event {
  id          String    @id @default(uuid())
  projectId   String
  sessionId   String?   // Optional → for grouping events per session
  pageUrl     String
  referrer    String
  userAgent   String
  ip          String
  country     String
  city        String
  timestamp   DateTime  @default(now())

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}


model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
